name: Publish Libraries to NuGet

on:
  push:
    branches:
      - main

jobs:
  publish:
    runs-on: ubuntu-latest

    env:
      NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Install xmlstarlet
      - name: Install xmlstarlet
        run: sudo apt-get install -y xmlstarlet

      # Setup .NET environment
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      # Build and publish libraries
      - name: Build and Publish Libraries
        run: |
          publish_package() {
            PACKAGE_ID=$1
            PROJECT_PATH=$2
            echo "Processing package: $PACKAGE_ID"

            # Get the latest version from NuGet
            PACKAGE_VERSION=$(curl -s https://api.nuget.org/v3-flatcontainer/${PACKAGE_ID}/index.json | jq -r '.versions[-1]')
            if [ -z "$PACKAGE_VERSION" ]; then
              echo "No versions found for $PACKAGE_ID. Starting from 1.0.0."
              NEW_VERSION="1.0.0"
            else
              echo "Latest version of $PACKAGE_ID: $PACKAGE_VERSION"
              NEW_VERSION=$(echo $PACKAGE_VERSION | awk -F. -v OFS=. '{$NF++; print}')
            fi
            echo "New version: $NEW_VERSION"

            # Update .csproj file with new version
            echo "Updating version in $PROJECT_PATH"
            xmlstarlet ed --inplace \
            -s "/Project/PropertyGroup" -t elem -n "Version" -v "$NEW_VERSION" "$PROJECT_PATH" \
            || xmlstarlet ed --inplace -u "//PropertyGroup/Version" -v "$NEW_VERSION" "$PROJECT_PATH"

            # Display the updated .csproj file for debugging
            echo "Updated .csproj:"
            cat "$PROJECT_PATH"

            # Build and pack package
            dotnet build $PROJECT_PATH --configuration Release
            dotnet pack $PROJECT_PATH --configuration Release

            # Determine the output path of the .nupkg file
            NUPKG_FILE=$(find "$(dirname "$PROJECT_PATH")/bin/Release" -name "*.nupkg" -type f)
            echo "NUPKG File $NUPKG_FILE"
            if [ -z "$NUPKG_FILE" ]; then
              echo "Error: .nupkg file not found for $PACKAGE_ID"
              exit 1
            fi

            # Push package to NuGet
            dotnet nuget push "$NUPKG_FILE" -k $NUGET_API_KEY -s https://api.nuget.org/v3/index.json --skip-duplicate
          }

          # Process each package
          publish_package "wc.library.web" "src/WC.Library.Web/WC.Library.Web.csproj"
